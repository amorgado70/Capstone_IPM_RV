@Model IPMRVPark.Services.Polygons

@{
    ViewBag.Title = "IPM Event Map";
    ViewBag.PageTitle = "IPM Event Map";
}

<script src="https://maps.googleapis.com/maps/api/js?callback=initMap&signed_in=true&key=AIzaSyAVhsjvoHi3xwEUsAqGd3WTzcO591PRzf4&callback" async defer>
</script>

@Html.ActionLink("Home", "Menu", "Login")
<span class="glyphicon glyphicon-chevron-right"></span>
@Html.ActionLink("IPM Event Map", "IPMEventMap", "EventMap")

<style>
    body {
        min-width: 1280px;
    }
    a {
    text-decoration: underline;
    }
</style>

<script type="text/javascript">

    var map;
    var lastRotate = 0;
    var zIndex =0;
    var sites = [];
    var polys = [];
    var bSiteInit = false;
    var lastRotate = 0;
    var lastUpdate;
    var lastUpdateString;
    var infoWindow;
    var selectionColor = "#B0C4DE";
    var size_services = [];

    window.onload = function () {
        initialize(@ViewBag.Lat, @ViewBag.Lng);
    }

    function initialize( Lat, Lng) {
        var myLatlng = new google.maps.LatLng( Lat,Lng);

        var myConfig = {
            zoom: 17,
              center: myLatlng,
            mapTypeControl: false,
            zoomControl: true,
            zoomControlOptions: {
                position: google.maps.ControlPosition.LEFT_CENTER
            },
            scaleControl: true,
            streetViewControl: false,
            fullscreenControl: true
        }
        // create google map object
        map = new google.maps.Map(document.getElementById("map"), myConfig);

        // create polygons for sites
        createPolygons();

        var styles = [
        {
            stylers: [
              { hue: "#00ffe6" },
              { saturation: -20 }
            ]
        },{
            featureType: "all",
            stylers: [
              { visibility: "off" }
            ]
        },{
            featureType: "road",
            elementType: "geometry",
            stylers: [
              { lightness: 100 },
              { visibility: "off" }
            ]
        },{
            featureType: "road",
            elementType: "labels",
            stylers: [
              { visibility: "off" }
            ]
        }
        ];
        // set void background
        map.setOptions({styles: styles});

        // set infoWindow
        this.infoWindow = new google.maps.InfoWindow();

        // set center control to go to reservation
        var centerControlDiv = document.createElement('div');
        var centerControl = new CenterControl(centerControlDiv, map);
        centerControlDiv.index = 1;
        map.controls[google.maps.ControlPosition.TOP_CENTER].push(centerControlDiv);

        // set bottom control to show site row
        var bottomControlDiv = document.createElement('div');
        var bottomControl = new BottomControl(bottomControlDiv, map);
        bottomControlDiv.index = 2;
        map.controls[google.maps.ControlPosition.BOTTOM_CENTER].push(bottomControlDiv);

        // set click event hanlder to close info window
        google.maps.event.addListener(map, 'click', function() {
            closeBubble();
        });

        // start to refresh
        startRefresh();
    }

    function setInit(){
        bSiteInit = true;
    }

    function BottomControl(bottomDiv, map) {

        bottomDiv.style.clear = 'both';
        // sort bottom control using last site_name of each control
        size_services.sort( function(a,b){ return a.site_name > b.site_name;});

        for( i=0; i<size_services.length; i++){
            // Set CSS for the control border.
            var controlUI = document.createElement('div');
            controlUI.id = "controlUI_" + i.toString();
            controlUI.style.backgroundColor = "#" + size_services[i].orgColor.substring(2);
            //controlUI.style.width = '10px';
            controlUI.style.border = '2px solid #fff';
            controlUI.style.borderRadius = '3px';
            controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
            controlUI.style.cursor = 'pointer';
            controlUI.style.marginLeft = '10px';
            controlUI.style.marginRight = '10px';
            controlUI.style.marginBottom = '10px';
            controlUI.style.textAlign = 'center';
            controlUI.style.float = 'left';
            controlUI.title = size_services[i].name;
            bottomDiv.appendChild(controlUI);

            // Set CSS for the control interior.
            var controlText = document.createElement('div');
            controlText.style.color = 'rgb(25,25,25)';
            controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
            controlText.style.fontSize = '12px';
            controlText.style.lineHeight = '28px';
            controlText.style.paddingLeft = '3px';
            controlText.style.paddingRight = '3px';
            size_services[i].row_name.sort();
            var _html = '';

            for( j=0; j<size_services[i].row_name.length; j++){
                _html += '<a>' + size_services[i].row_name[j] + '</a>&nbsp'
            }
            _html += '<br>' + size_services[i].name;

            controlText.innerHTML = _html;
            controlUI.appendChild(controlText);

            // Setup the click event listeners
            //controlUI.addEventListener('click', function(event) {
            //    //alert("pressed center control");
            //    showInfo(event.latLng, controlText.innerHTML);
            //});

            google.maps.event.addDomListener(controlUI, 'click', function(event) {
                //alert("pressed center control");
                //showInfo(event.x, event.y, event.currentTarget.id);
            });

            //google.maps.event.addListener(poly, 'mouseout', function() {
            //    closeBubble();
            //});
        }
    }

    function pixelToLatlng(xcoor, ycoor) {
        var ne = map.getBounds().getNorthEast();
        var sw = map.getBounds().getSouthWest();
        var projection = map.getProjection();
        var topRight = projection.fromLatLngToPoint(ne);
        var bottomLeft = projection.fromLatLngToPoint(sw);
        var scale = 1 << map.getZoom();
        var newLatlng = projection.fromPointToLatLng(new google.maps.Point(xcoor / scale + bottomLeft.x, ycoor / scale + topRight.y));
        return newLatlng;
    }

    function showInfo(x,y, content){
        var latLng = pixelToLatlng(x, y-110);


        if (this.infoWindow){
            if (content !== undefined){
                this.infoWindow.setContent( content );
            }
            if (latLng !== undefined){
                this.infoWindow.setPosition(latLng);
            }
            this.infoWindow.open(this.map);
        }
    }

    function CenterControl(controlDiv, map) {
        // Set CSS for the control border.
        var controlUI = document.createElement('div');
        controlUI.style.backgroundColor = '#fff';
        controlUI.style.border = '2px solid #fff';
        controlUI.style.borderRadius = '3px';
        controlUI.style.boxShadow = '0 2px 6px rgba(0,0,0,.3)';
        controlUI.style.cursor = 'pointer';
        controlUI.style.marginTop = '22px';
        controlUI.style.marginBottom = '22px';
        controlUI.style.textAlign = 'center';
        controlUI.title = 'Click to go back to Reservation';
        controlDiv.appendChild(controlUI);

        // Set CSS for the control interior.
        var controlText = document.createElement('div');
        controlText.style.color = 'rgb(25,25,25)';
        controlText.style.fontFamily = 'Roboto,Arial,sans-serif';
        controlText.style.fontSize = '12px';
        controlText.style.lineHeight = '28px';
        controlText.style.paddingLeft = '3px';
        controlText.style.paddingRight = '3px';
        controlText.innerHTML = 'Go to Reservation';
        controlUI.appendChild(controlText);

        // Setup the click event listeners
        controlUI.addEventListener('click', function() {
            window.location.replace("../Reservation/NewReservation");
        });
    }

    function find_size_service( size_service_name, site_name ){
        for( i=0; i<size_services.length; i++ )
        {
            if( size_services[i].name == size_service_name )
            {
                size_services[i].site_name = site_name;
                var _row_name = site_name.split('-');

                var found = false;
                for( j=0; j<size_services[i].row_name.length; j++ )
                {
                    if( size_services[i].row_name[j] == _row_name[0].trimRight() )
                    {
                        found = true;
                        break;
                    }
                }
                if( !found )
                    size_services[i].row_name.push(_row_name[0].trimRight());

                return true;
            }
        }
        return false;
    }

    // create polygon
    function setSites( id, name, service, tag, color, orgColor, isSite, coords ){
        var site = {
            id : id,
            name : name,
            service : service,
            tag : tag,
            color : color,
            isSite : isSite,
            coords : coords
        };
        sites.push( site );

        var size_service_name = service + ' / ' + tag;

        if( isSite && !find_size_service( size_service_name, name ))
        {
            var size_service = {
                site_name : name,
                row_name : [],
                name : size_service_name,
                orgColor : orgColor
            };
            var _row_name = name.split('-');
            size_service.row_name.push(_row_name[0].trimRight());
            size_services.push(size_service);
        }
    }

    function createPolygons(){
        for (i = 0; i < sites.length; i++){
            createPolygonObject( sites[i].id, sites[i].name, sites[i].service, sites[i].tag, 
                sites[i].color, sites[i].isSite, sites[i].coords);
        }
    }

    function createPolygonObject( id, name, service, tag, color, isSite, coords ){
        var bounds = new google.maps.LatLngBounds();
        var latlng, path, coord;
        path = [];

        for (j = 0; j < coords.length; j++){
            coord = coords[j];
            latlng = new google.maps.LatLng(coord.X, coord.Y);
            path.push(latlng);
            bounds.extend(latlng);
        }

        var point = bounds.getCenter();

        var content= '<div><h3>' + name + '</h3><div>' + service + '</div><div>' + tag + '</div></div>' 
            + "<div><button onclick='selectSite(" + id.toString() + ")'>select</button></div>";

        var polyOptions = { map:  this.map,
            paths: path,
            title: name,
            position: point,
            strokeColor: "#000000",
            strokeWeight: 0.5,
            strokeOpacity: 1,
            fillColor: "#" + color.substring(2),
            fillOpacity: isSite ? 1 : 0.1,
            description: content,
            folderId:   1,
            zIndex: this.zindex++,
            clickable: isSite
        };

        var poly = new google.maps.Polygon(polyOptions);

        poly.bounds = bounds;
        poly.id = id;
        poly.docId = 1;
        poly.name = name;

        google.maps.event.addListener(poly, 'click', function() {
            openBubble(poly);
        });

        //google.maps.event.addListener(poly, 'mouseover', function() {
        //    showSiteName(poly);
        //});

        //google.maps.event.addListener(poly, 'mouseout', function() {
        //    closeBubble();
        //});



        this.polys.push(poly);
        //placemark.areas.push(poly);
        //placemark.mapObject = poly;
        poly.setMap(this.map);
    }

    function showSiteName(poly){
        if (this.infoWindow){
            if (poly.name !== undefined){
                //this.infoWindow.setContent(object.description);
                this.infoWindow.setContent( poly.name );
            }
            if (poly.position !== undefined){
                this.infoWindow.setPosition(poly.position);
            }
            this.infoWindow.open(this.map, poly);
        }
    }

    function openBubble(poly){
        if (this.infoWindow){
            if (poly.description !== undefined){
                //this.infoWindow.setContent(object.description);
                this.infoWindow.setContent( poly.description );
            }
            if (poly.position !== undefined){
                this.infoWindow.setPosition(poly.position);
            }
            this.infoWindow.open(this.map, poly);
        }
    }

    function closeBubble() {
        if (this.infoWindow){
            this.infoWindow.close();
        }
    }

    function selectSite(id){
        var postpath = '../Reservation/SelectSiteOnMap';
        $.ajax({                
            url: postpath,
            type: 'POST',
            dataType: 'json',
            data: { //Passing data
                id: id
            },
            success: function (result) {
                var poly = getPoly(id);
                poly.setOptions({ fillColor:selectionColor});
                closeBubble();
                },
            error: function (result) {
                //console.error("ajax failed, status: " + textStatus + ", error: "+error)
                alert( "Site Selection failed.");
                }
        });
    }

    function getPoly( key ){
        for(i=0; i<polys.length; i++){
            if( key == polys[i].id )
                return polys[i];
        }
        return null;
    }

    // update site !! need optimization with binary search or indexed contents
    function updateSite( update ){
        var key = update.id;
        var poly = getPoly(key);

        poly.setOptions({ fillColor:"#" + update.fillColor.substring(2)});

        lastUpdateString = update.lastUpdate;
    }

    function siteUpdate(updates){
        for (j = 0; j < updates.length; j++){
            updateSite( updates[j]);
        }
    }

    // Ajax request for site update
    function startRefresh(){
        $.getJSON( "../EventMap/GetSiteUpdate", {lastUpdate:lastUpdateString},
                function(data){
                    siteUpdate(data);
                }).done( function(){
                    setTimeout(startRefresh, 5000);
                }).fail( function(jqxhr, textStatus, error) {
                    console.error("getJSON failed, status: " + textStatus + ", error: "+error)
                    //alert( jqxhr.responseText );
                    alert( "Site information Refresh failed.");
                });
    }

    //rotate a polygon
    function rotatePolygons(angle){
        // get angle change for rotate adjustment
        var angleChange = angle - lastRotate;
        // get all shapes from this parser

        for( k=0; k<polys.length; k++)
            rotatePolygon(polys[k], angleChange );

        // reset last rotate
        lastRotate = angle;
    }

    function rotatePolygon(polygon, angle){
        var prj = map.getProjection();
        var origin = prj.fromLatLngToPoint(map.getCenter());
        var coords = polygon.getPath().getArray().map(function(latLng){
            var point = prj.fromLatLngToPoint(latLng);
            var rotatedLatLng =  prj.fromPointToLatLng(rotatePoint(point,origin,angle));
            return {lat: rotatedLatLng.lat(), lng: rotatedLatLng.lng()};
        });

        // recalculate bounds of polygon
        var bounds = new google.maps.LatLngBounds();
        for (j = 0; j < coords.length; j++){
            coord = coords[j];
            latlng = new google.maps.LatLng(coord.lat, coord.lng);
            bounds.extend(latlng);
        }
        // reassign center position for openBubble window
        var center = bounds.getCenter();
        polygon.setOptions({ position:center});

        // reassign coordinates
        polygon.setPaths(coords);
    }

    function rotatePoint(point, origin, angle){

        var angleRad = (angle/10.0) * Math.PI / 180.0;
        return {
            x: Math.cos(angleRad) * (point.x - origin.x) - Math.sin(angleRad) * (point.y - origin.y) + origin.x,
            y: Math.sin(angleRad) * (point.x - origin.x) + Math.cos(angleRad) * (point.y - origin.y) + origin.y
        };
    }

</script>

@{
    var itemModel = Model.Sites;
}
<div class="container-fluid">
    <div class="row text-center">
        @*<div class="col-xs-12 col-xs-push-1 top-margin">*@
        <div class="col-xs-12 top-margin">
            <!--<img src="~/Images/IPMEventMap.png" class="img-responsive img-rounded" alt="IPM Evnent Map" style="min-height:500px; width:100%;" />-->

            <div id="map" style="min-height:800px; width:100%;"></div>
            <div>
                @{
                    foreach (var item in @itemModel)
                    {
                        <script>
                            setSites(@item.id,  '@Html.Raw(@item.name)', '@item.service.description', '@item.size.description', '@item.poly_color',
                                            '@item.style.poly_color', '@item.isSite'=='True'?1:0, @Html.Raw(@item.json_coord))
                        </script>
                    }
                    <script>setInit()</script>
                }
            </div>

            <input class="rotateSlider" type="range" min="-1800" max="1800" value="0" step="1" onchange="rotatePolygons(this.value)" />

            <p id="refresh"></p>
        </div>
    </div>
</div>

